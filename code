import numpy as np
import pandas as pd

# Fungsi untuk menghitung tabel selisih terbagi Newton dan menampilkan setiap iterasi
def newton_divided_diff_table_with_steps(x, y):
    n = len(x)
    table = np.zeros([n, n])
    table[:, 0] = y  # Kolom pertama adalah nilai y

    # List untuk menyimpan tabel di setiap iterasi
    iteration_steps = []

    # Iterasi untuk menghitung selisih terbagi
    for j in range(1, n):
        for i in range(n - j):
            table[i, j] = (table[i + 1, j - 1] - table[i, j - 1]) / (x[i + j] - x[i])
        
        # Simpan tabel pada iterasi ke-j
        step_table = pd.DataFrame({
            "x": x[:n - j],
            f"Δ^{j - 1} y": table[:n - j, j - 1],
            f"Δ^{j} y": table[:n - j, j]
        })
        iteration_steps.append(step_table)
    
    return table, iteration_steps

# Fungsi untuk menghitung nilai P(x)
def newton_polynomial(x, x_data, coef):
    n = len(coef)
    result = coef[0]
    for i in range(1, n):
        term = coef[i]
        for j in range(i):
            term *= (x - x_data[j])
        result += term
    return result

# Input data
q = 23  # Dua digit terakhir NIM
x_data = np.array([0, 1, 2, 3])
y_data = x_data**3 + q

# Hitung tabel selisih terbagi
table, steps = newton_divided_diff_table_with_steps(x_data, y_data)

# Buat tabel selisih terbagi akhir dalam bentuk pandas DataFrame
columns = ["x", "y"] + [f"Δ^{i}" for i in range(1, len(x_data))]
final_table = pd.DataFrame(
    np.column_stack([x_data, table]),
    columns=columns
)

# Ganti nilai kosong di tabel (selisih yang tidak digunakan) dengan NaN
final_table.iloc[:, 2:] = final_table.iloc[:, 2:].replace(0, np.nan)

# Nilai x yang akan dihitung
x_value = (q % 5) + 1.5

# Hitung koefisien polinomial dan nilai P(x)
coef = table[0, :]  # Koefisien polinomial
result = newton_polynomial(x_value, x_data, coef)

# Output: Tabel selisih terbagi di setiap iterasi
print("Tabel Selisih Terbagi di Setiap Iterasi:")
for i, step in enumerate(steps, start=1):
    print(f"\nIterasi ke-{i}:")
    print(step)

# Output: Tabel akhir, koefisien, dan hasil P(x)
print("\nTabel Selisih Terbagi Akhir:")
print(final_table)
print("\nKoefisien polinomial Newton:", coef)
print(f"\nNilai P({x_value}): {result}")
